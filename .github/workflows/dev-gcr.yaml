name: Microservices

on:
  push:
   branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

jobs:
  Microservices-Build:
    runs-on: ubuntu-latest
    steps:
     - name: üõí Checkout
       uses: actions/checkout@v3
       with:
        fetch-depth: 0

     - name: Set Up Golang
       uses: actions/setup-go@v3
       with:
        go-version: '^1.18' # The Go version to download (if necessary) and use.
     - run: go version

     - name: Installing Docker Compose 
       run: |
        mkdir -p ~/.docker/cli-plugins/
        curl -SL https://github.com/docker/compose/releases/download/v2.6.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
        chmod +x ~/.docker/cli-plugins/docker-compose
        chmod +x ~/.docker/cli-plugins/docker-compose
     - name: üõ†Ô∏è Build
       run: |
        ls -la
        cd project
        make up_build

        echo "LS IN PROJECT DIRECTORY" 
        ls -la

     - name: Removing and copying and files 
       run: |

        cp broker-service/broker-service.dockerfile .
        cp broker-service/brokerApp .
        cp front-end/front-end.dockerfile .
        cp front-end/frontEndApp .
        cp authentication-service/authentication-service.dockerfile .
        cp authentication-service/authApp .
        cp listener-service/listener-service.dockerfile .
        cp listener-service/listenerApp .
        cp logger-service/logger-service.dockerfile .
        cp logger-service/loggerServiceApp .
        cp mail-service/mail-service.dockerfile .
        cp mail-service/mailerApp .
        sudo rm -r project/
        sudo rm -r broker-service/
        sudo rm -r front-end/
        sudo rm -r authentication-service/
        sudo rm -r listener-service/
        sudo rm -r logger-service/
        sudo rm -r mail-service/
        sudo rm  microservices-anibal.code-workspace
        sudo rm  microservices-anibalwin.code-workspace
        sudo rm  README.md
        sudo rm -r .vscode
        sudo rm .gitignore
        ls -la
        
     - name: ‚¨ÜÔ∏è Uploading artifact
       uses: actions/upload-artifact@v3
       with: 
        name: my-artifact
        path: .


  Deploying:
   runs-on: ubuntu-latest
   if: github.event_name == 'push'
   needs: Microservices-Build
   env:
      PROJECT_ID: dev-anibal
   steps:
    - name: ‚¨áÔ∏è Downloading artifact
      uses: actions/download-artifact@v3
      with:
       name: my-artifact
     
    
    - name: Display structure of downloaded files
      run: ls -la


    - name: Deploying to GCR
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.broker-service }}
        export_default_credentials: true
    - name: Configure Docker Client
      run: |
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      
    - name: Get current date #  get the date of the build
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

    # - name:  ‚û°Ô∏è Copying the files for the build of the docker images ‚û°Ô∏è
      # run: |
        # cp broker-service/broker-service.dockerfile .
        # cp broker-service/brokerApp .
        # cp front-end/front-end.dockerfile .
        # cp front-end/frontEndApp .
        # cp authentication-service/authentication-service.dockerfile .
        # cp authentication-service/authApp .
        # cp listener-service/listener-service.dockerfile .
        # cp listener-service/listenerApp .
        # cp logger-service/logger-service.dockerfile .
        # cp logger-service/loggerServiceApp .
        # cp mail-service/mail-service.dockerfile .
        # cp mail-service/mailerApp .
# 
        # ls -la
    - name: Build the Broker Service Docker image üßôüèº‚Äç‚ôÇÔ∏è
      run: |
        docker build -f broker-service.dockerfile -t  broker:latest .

    - name: Build the Frontend Docker image ü™û
      run: |
        docker build -f front-end.dockerfile -t  frontend:latest .

    - name: Build the Authencation Service Docker image üóùÔ∏è
      run: |
        docker build -f  authentication-service.dockerfile -t  auth:latest .

    
  

    
    
    - name: Push the Broker Service Docker Image to Container Registry (GCR) üßôüèº‚Äç‚ôÇÔ∏è‚¨ÜÔ∏è
      run: |
       docker tag broker:latest gcr.io/$PROJECT_ID/broker:latest
       docker tag broker:latest gcr.io/$PROJECT_ID/broker:${{ steps.date.outputs.date }}
       docker push gcr.io/$PROJECT_ID/broker:latest
       docker push gcr.io/$PROJECT_ID/broker:${{ steps.date.outputs.date }}

    - name: Push the Frontend Docker Image to Container Registry (GCR) ü™û‚¨ÜÔ∏è
      run: |
       docker tag frontend:latest gcr.io/$PROJECT_ID/frontend:latest
       docker tag frontend:latest gcr.io/$PROJECT_ID/frontend:${{ steps.date.outputs.date }}
       docker push gcr.io/$PROJECT_ID/frontend:latest
       docker push gcr.io/$PROJECT_ID/frontend:${{ steps.date.outputs.date }}

    - name: Push the Frontend Docker Image to Container Registry (GCR) üóùÔ∏è‚¨ÜÔ∏è
      run: |
       docker tag auth:latest gcr.io/$PROJECT_ID/auth:latest
       docker tag auth:latest gcr.io/$PROJECT_ID/auth:${{ steps.date.outputs.date }}
       docker push gcr.io/$PROJECT_ID/auth:latest
       docker push gcr.io/$PROJECT_ID/auth:${{ steps.date.outputs.date }}